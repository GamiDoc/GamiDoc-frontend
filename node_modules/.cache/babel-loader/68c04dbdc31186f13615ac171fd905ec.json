{"ast":null,"code":"import _includes from './_includes.js';\n\nvar _Set = /*#__PURE__*/function () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  } // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n\n\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  }; //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n\n\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  }; //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n\n\n  return _Set;\n}();\n\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n\n          return false;\n        }\n      } // these types can all utilise the native Set\n\n\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n\n          set._nativeSet.add(item);\n\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n\n          return false;\n        }\n\n        if (!_includes(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n    /* falls through */\n\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n\n        return false;\n      } // scan through all previously applied items\n\n\n      if (!_includes(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n\n        return false;\n      }\n\n      return true;\n  }\n} // A simple Set type that honours R.equals semantics\n\n\nexport default _Set;","map":{"version":3,"names":["_includes","_Set","_nativeSet","Set","_items","prototype","add","item","hasOrAdd","has","shouldAdd","set","type","prevSize","newSize","Infinity","size","bIdx","push","Object","toString","call"],"sources":["/home/carlobottaro/Documents/Universit√†/gamification/node_modules/ramda/es/internal/_Set.js"],"sourcesContent":["import _includes from './_includes.js';\n\nvar _Set = /*#__PURE__*/function () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  };\n\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  };\n\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  return _Set;\n}();\n\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n          return false;\n        }\n      }\n      // these types can all utilise the native Set\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        if (!_includes(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n          return false;\n        }\n        return true;\n      }\n    /* falls through */\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n        return false;\n      }\n      // scan through all previously applied items\n      if (!_includes(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n        return false;\n      }\n      return true;\n  }\n}\n\n// A simple Set type that honours R.equals semantics\nexport default _Set;"],"mappings":"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"},"metadata":{},"sourceType":"module"}