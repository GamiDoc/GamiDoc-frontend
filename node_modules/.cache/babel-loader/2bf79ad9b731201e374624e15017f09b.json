{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safer-buffer').Buffer; // == UTF32-LE/BE codec. ==========================================================\n\n\nexports._utf32 = Utf32Codec;\n\nfunction Utf32Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n  this.bomAware = true;\n  this.isLE = codecOptions.isLE;\n}\n\nexports.utf32le = {\n  type: '_utf32',\n  isLE: true\n};\nexports.utf32be = {\n  type: '_utf32',\n  isLE: false\n}; // Aliases\n\nexports.ucs4le = 'utf32le';\nexports.ucs4be = 'utf32be';\nUtf32Codec.prototype.encoder = Utf32Encoder;\nUtf32Codec.prototype.decoder = Utf32Decoder; // -- Encoding\n\nfunction Utf32Encoder(options, codec) {\n  this.isLE = codec.isLE;\n  this.highSurrogate = 0;\n}\n\nUtf32Encoder.prototype.write = function (str) {\n  var src = Buffer.from(str, 'ucs2');\n  var dst = Buffer.alloc(src.length * 2);\n  var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;\n  var offset = 0;\n\n  for (var i = 0; i < src.length; i += 2) {\n    var code = src.readUInt16LE(i);\n    var isHighSurrogate = 0xD800 <= code && code < 0xDC00;\n    var isLowSurrogate = 0xDC00 <= code && code < 0xE000;\n\n    if (this.highSurrogate) {\n      if (isHighSurrogate || !isLowSurrogate) {\n        // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low\n        // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character\n        // (technically wrong, but expected by some applications, like Windows file names).\n        write32.call(dst, this.highSurrogate, offset);\n        offset += 4;\n      } else {\n        // Create 32-bit value from high and low surrogates;\n        var codepoint = (this.highSurrogate - 0xD800 << 10 | code - 0xDC00) + 0x10000;\n        write32.call(dst, codepoint, offset);\n        offset += 4;\n        this.highSurrogate = 0;\n        continue;\n      }\n    }\n\n    if (isHighSurrogate) this.highSurrogate = code;else {\n      // Even if the current character is a low surrogate, with no previous high surrogate, we'll\n      // encode it as a semi-invalid stand-alone character for the same reasons expressed above for\n      // unpaired high surrogates.\n      write32.call(dst, code, offset);\n      offset += 4;\n      this.highSurrogate = 0;\n    }\n  }\n\n  if (offset < dst.length) dst = dst.slice(0, offset);\n  return dst;\n};\n\nUtf32Encoder.prototype.end = function () {\n  // Treat any leftover high surrogate as a semi-valid independent character.\n  if (!this.highSurrogate) return;\n  var buf = Buffer.alloc(4);\n  if (this.isLE) buf.writeUInt32LE(this.highSurrogate, 0);else buf.writeUInt32BE(this.highSurrogate, 0);\n  this.highSurrogate = 0;\n  return buf;\n}; // -- Decoding\n\n\nfunction Utf32Decoder(options, codec) {\n  this.isLE = codec.isLE;\n  this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);\n  this.overflow = [];\n}\n\nUtf32Decoder.prototype.write = function (src) {\n  if (src.length === 0) return '';\n  var i = 0;\n  var codepoint = 0;\n  var dst = Buffer.alloc(src.length + 4);\n  var offset = 0;\n  var isLE = this.isLE;\n  var overflow = this.overflow;\n  var badChar = this.badChar;\n\n  if (overflow.length > 0) {\n    for (; i < src.length && overflow.length < 4; i++) overflow.push(src[i]);\n\n    if (overflow.length === 4) {\n      // NOTE: codepoint is a signed int32 and can be negative.\n      // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).\n      if (isLE) {\n        codepoint = overflow[i] | overflow[i + 1] << 8 | overflow[i + 2] << 16 | overflow[i + 3] << 24;\n      } else {\n        codepoint = overflow[i + 3] | overflow[i + 2] << 8 | overflow[i + 1] << 16 | overflow[i] << 24;\n      }\n\n      overflow.length = 0;\n      offset = _writeCodepoint(dst, offset, codepoint, badChar);\n    }\n  } // Main loop. Should be as optimized as possible.\n\n\n  for (; i < src.length - 3; i += 4) {\n    // NOTE: codepoint is a signed int32 and can be negative.\n    if (isLE) {\n      codepoint = src[i] | src[i + 1] << 8 | src[i + 2] << 16 | src[i + 3] << 24;\n    } else {\n      codepoint = src[i + 3] | src[i + 2] << 8 | src[i + 1] << 16 | src[i] << 24;\n    }\n\n    offset = _writeCodepoint(dst, offset, codepoint, badChar);\n  } // Keep overflowing bytes.\n\n\n  for (; i < src.length; i++) {\n    overflow.push(src[i]);\n  }\n\n  return dst.slice(0, offset).toString('ucs2');\n};\n\nfunction _writeCodepoint(dst, offset, codepoint, badChar) {\n  // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.\n  if (codepoint < 0 || codepoint > 0x10FFFF) {\n    // Not a valid Unicode codepoint\n    codepoint = badChar;\n  } // Ephemeral Planes: Write high surrogate.\n\n\n  if (codepoint >= 0x10000) {\n    codepoint -= 0x10000;\n    var high = 0xD800 | codepoint >> 10;\n    dst[offset++] = high & 0xff;\n    dst[offset++] = high >> 8; // Low surrogate is written below.\n\n    var codepoint = 0xDC00 | codepoint & 0x3FF;\n  } // Write BMP char or low surrogate.\n\n\n  dst[offset++] = codepoint & 0xff;\n  dst[offset++] = codepoint >> 8;\n  return offset;\n}\n\n;\n\nUtf32Decoder.prototype.end = function () {\n  this.overflow.length = 0;\n}; // == UTF-32 Auto codec =============================================================\n// Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.\n// Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32\n// Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});\n// Encoder prepends BOM (which can be overridden with (addBOM: false}).\n\n\nexports.utf32 = Utf32AutoCodec;\nexports.ucs4 = 'utf32';\n\nfunction Utf32AutoCodec(options, iconv) {\n  this.iconv = iconv;\n}\n\nUtf32AutoCodec.prototype.encoder = Utf32AutoEncoder;\nUtf32AutoCodec.prototype.decoder = Utf32AutoDecoder; // -- Encoding\n\nfunction Utf32AutoEncoder(options, codec) {\n  options = options || {};\n  if (options.addBOM === undefined) options.addBOM = true;\n  this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);\n}\n\nUtf32AutoEncoder.prototype.write = function (str) {\n  return this.encoder.write(str);\n};\n\nUtf32AutoEncoder.prototype.end = function () {\n  return this.encoder.end();\n}; // -- Decoding\n\n\nfunction Utf32AutoDecoder(options, codec) {\n  this.decoder = null;\n  this.initialBufs = [];\n  this.initialBufsLen = 0;\n  this.options = options || {};\n  this.iconv = codec.iconv;\n}\n\nUtf32AutoDecoder.prototype.write = function (buf) {\n  if (!this.decoder) {\n    // Codec is not chosen yet. Accumulate initial bytes.\n    this.initialBufs.push(buf);\n    this.initialBufsLen += buf.length;\n    if (this.initialBufsLen < 32) // We need more bytes to use space heuristic (see below)\n      return ''; // We have enough bytes -> detect endianness.\n\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var resStr = '';\n\n    for (var i = 0; i < this.initialBufs.length; i++) resStr += this.decoder.write(this.initialBufs[i]);\n\n    this.initialBufs.length = this.initialBufsLen = 0;\n    return resStr;\n  }\n\n  return this.decoder.write(buf);\n};\n\nUtf32AutoDecoder.prototype.end = function () {\n  if (!this.decoder) {\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var resStr = '';\n\n    for (var i = 0; i < this.initialBufs.length; i++) resStr += this.decoder.write(this.initialBufs[i]);\n\n    var trail = this.decoder.end();\n    if (trail) resStr += trail;\n    this.initialBufs.length = this.initialBufsLen = 0;\n    return resStr;\n  }\n\n  return this.decoder.end();\n};\n\nfunction detectEncoding(bufs, defaultEncoding) {\n  var b = [];\n  var charsProcessed = 0;\n  var invalidLE = 0,\n      invalidBE = 0; // Number of invalid chars when decoded as LE or BE.\n\n  var bmpCharsLE = 0,\n      bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.\n\n  outer_loop: for (var i = 0; i < bufs.length; i++) {\n    var buf = bufs[i];\n\n    for (var j = 0; j < buf.length; j++) {\n      b.push(buf[j]);\n\n      if (b.length === 4) {\n        if (charsProcessed === 0) {\n          // Check BOM first.\n          if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {\n            return 'utf-32le';\n          }\n\n          if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {\n            return 'utf-32be';\n          }\n        }\n\n        if (b[0] !== 0 || b[1] > 0x10) invalidBE++;\n        if (b[3] !== 0 || b[2] > 0x10) invalidLE++;\n        if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;\n        if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;\n        b.length = 0;\n        charsProcessed++;\n\n        if (charsProcessed >= 100) {\n          break outer_loop;\n        }\n      }\n    }\n  } // Make decisions.\n\n\n  if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE) return 'utf-32be';\n  if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE) return 'utf-32le'; // Couldn't decide (likely all zeros or not enough data).\n\n  return defaultEncoding || 'utf-32le';\n}","map":{"version":3,"names":["Buffer","require","exports","_utf32","Utf32Codec","codecOptions","iconv","bomAware","isLE","utf32le","type","utf32be","ucs4le","ucs4be","prototype","encoder","Utf32Encoder","decoder","Utf32Decoder","options","codec","highSurrogate","write","str","src","from","dst","alloc","length","write32","writeUInt32LE","writeUInt32BE","offset","i","code","readUInt16LE","isHighSurrogate","isLowSurrogate","call","codepoint","slice","end","buf","badChar","defaultCharUnicode","charCodeAt","overflow","push","_writeCodepoint","toString","high","utf32","Utf32AutoCodec","ucs4","Utf32AutoEncoder","Utf32AutoDecoder","addBOM","undefined","getEncoder","defaultEncoding","initialBufs","initialBufsLen","encoding","detectEncoding","getDecoder","resStr","trail","bufs","b","charsProcessed","invalidLE","invalidBE","bmpCharsLE","bmpCharsBE","outer_loop","j"],"sources":["/home/carlobottaro/Documents/Università/gamification/node_modules/iconv-lite/encodings/utf32.js"],"sourcesContent":["'use strict';\n\nvar Buffer = require('safer-buffer').Buffer;\n\n// == UTF32-LE/BE codec. ==========================================================\n\nexports._utf32 = Utf32Codec;\n\nfunction Utf32Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n    this.bomAware = true;\n    this.isLE = codecOptions.isLE;\n}\n\nexports.utf32le = { type: '_utf32', isLE: true };\nexports.utf32be = { type: '_utf32', isLE: false };\n\n// Aliases\nexports.ucs4le = 'utf32le';\nexports.ucs4be = 'utf32be';\n\nUtf32Codec.prototype.encoder = Utf32Encoder;\nUtf32Codec.prototype.decoder = Utf32Decoder;\n\n// -- Encoding\n\nfunction Utf32Encoder(options, codec) {\n    this.isLE = codec.isLE;\n    this.highSurrogate = 0;\n}\n\nUtf32Encoder.prototype.write = function(str) {\n    var src = Buffer.from(str, 'ucs2');\n    var dst = Buffer.alloc(src.length * 2);\n    var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;\n    var offset = 0;\n\n    for (var i = 0; i < src.length; i += 2) {\n        var code = src.readUInt16LE(i);\n        var isHighSurrogate = (0xD800 <= code && code < 0xDC00);\n        var isLowSurrogate = (0xDC00 <= code && code < 0xE000);\n\n        if (this.highSurrogate) {\n            if (isHighSurrogate || !isLowSurrogate) {\n                // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low\n                // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character\n                // (technically wrong, but expected by some applications, like Windows file names).\n                write32.call(dst, this.highSurrogate, offset);\n                offset += 4;\n            }\n            else {\n                // Create 32-bit value from high and low surrogates;\n                var codepoint = (((this.highSurrogate - 0xD800) << 10) | (code - 0xDC00)) + 0x10000;\n\n                write32.call(dst, codepoint, offset);\n                offset += 4;\n                this.highSurrogate = 0;\n\n                continue;\n            }\n        }\n\n        if (isHighSurrogate)\n            this.highSurrogate = code;\n        else {\n            // Even if the current character is a low surrogate, with no previous high surrogate, we'll\n            // encode it as a semi-invalid stand-alone character for the same reasons expressed above for\n            // unpaired high surrogates.\n            write32.call(dst, code, offset);\n            offset += 4;\n            this.highSurrogate = 0;\n        }\n    }\n\n    if (offset < dst.length)\n        dst = dst.slice(0, offset);\n\n    return dst;\n};\n\nUtf32Encoder.prototype.end = function() {\n    // Treat any leftover high surrogate as a semi-valid independent character.\n    if (!this.highSurrogate)\n        return;\n\n    var buf = Buffer.alloc(4);\n\n    if (this.isLE)\n        buf.writeUInt32LE(this.highSurrogate, 0);\n    else\n        buf.writeUInt32BE(this.highSurrogate, 0);\n\n    this.highSurrogate = 0;\n\n    return buf;\n};\n\n// -- Decoding\n\nfunction Utf32Decoder(options, codec) {\n    this.isLE = codec.isLE;\n    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);\n    this.overflow = [];\n}\n\nUtf32Decoder.prototype.write = function(src) {\n    if (src.length === 0)\n        return '';\n\n    var i = 0;\n    var codepoint = 0;\n    var dst = Buffer.alloc(src.length + 4);\n    var offset = 0;\n    var isLE = this.isLE;\n    var overflow = this.overflow;\n    var badChar = this.badChar;\n\n    if (overflow.length > 0) {\n        for (; i < src.length && overflow.length < 4; i++)\n            overflow.push(src[i]);\n        \n        if (overflow.length === 4) {\n            // NOTE: codepoint is a signed int32 and can be negative.\n            // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).\n            if (isLE) {\n                codepoint = overflow[i] | (overflow[i+1] << 8) | (overflow[i+2] << 16) | (overflow[i+3] << 24);\n            } else {\n                codepoint = overflow[i+3] | (overflow[i+2] << 8) | (overflow[i+1] << 16) | (overflow[i] << 24);\n            }\n            overflow.length = 0;\n\n            offset = _writeCodepoint(dst, offset, codepoint, badChar);\n        }\n    }\n\n    // Main loop. Should be as optimized as possible.\n    for (; i < src.length - 3; i += 4) {\n        // NOTE: codepoint is a signed int32 and can be negative.\n        if (isLE) {\n            codepoint = src[i] | (src[i+1] << 8) | (src[i+2] << 16) | (src[i+3] << 24);\n        } else {\n            codepoint = src[i+3] | (src[i+2] << 8) | (src[i+1] << 16) | (src[i] << 24);\n        }\n        offset = _writeCodepoint(dst, offset, codepoint, badChar);\n    }\n\n    // Keep overflowing bytes.\n    for (; i < src.length; i++) {\n        overflow.push(src[i]);\n    }\n\n    return dst.slice(0, offset).toString('ucs2');\n};\n\nfunction _writeCodepoint(dst, offset, codepoint, badChar) {\n    // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.\n    if (codepoint < 0 || codepoint > 0x10FFFF) {\n        // Not a valid Unicode codepoint\n        codepoint = badChar;\n    } \n\n    // Ephemeral Planes: Write high surrogate.\n    if (codepoint >= 0x10000) {\n        codepoint -= 0x10000;\n\n        var high = 0xD800 | (codepoint >> 10);\n        dst[offset++] = high & 0xff;\n        dst[offset++] = high >> 8;\n\n        // Low surrogate is written below.\n        var codepoint = 0xDC00 | (codepoint & 0x3FF);\n    }\n\n    // Write BMP char or low surrogate.\n    dst[offset++] = codepoint & 0xff;\n    dst[offset++] = codepoint >> 8;\n\n    return offset;\n};\n\nUtf32Decoder.prototype.end = function() {\n    this.overflow.length = 0;\n};\n\n// == UTF-32 Auto codec =============================================================\n// Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.\n// Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32\n// Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});\n\n// Encoder prepends BOM (which can be overridden with (addBOM: false}).\n\nexports.utf32 = Utf32AutoCodec;\nexports.ucs4 = 'utf32';\n\nfunction Utf32AutoCodec(options, iconv) {\n    this.iconv = iconv;\n}\n\nUtf32AutoCodec.prototype.encoder = Utf32AutoEncoder;\nUtf32AutoCodec.prototype.decoder = Utf32AutoDecoder;\n\n// -- Encoding\n\nfunction Utf32AutoEncoder(options, codec) {\n    options = options || {};\n\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n\n    this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);\n}\n\nUtf32AutoEncoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n};\n\nUtf32AutoEncoder.prototype.end = function() {\n    return this.encoder.end();\n};\n\n// -- Decoding\n\nfunction Utf32AutoDecoder(options, codec) {\n    this.decoder = null;\n    this.initialBufs = [];\n    this.initialBufsLen = 0;\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf32AutoDecoder.prototype.write = function(buf) {\n    if (!this.decoder) { \n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBufs.push(buf);\n        this.initialBufsLen += buf.length;\n\n        if (this.initialBufsLen < 32) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n\n    return this.decoder.write(buf);\n};\n\nUtf32AutoDecoder.prototype.end = function() {\n    if (!this.decoder) {\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        var trail = this.decoder.end();\n        if (trail)\n            resStr += trail;\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n\n    return this.decoder.end();\n};\n\nfunction detectEncoding(bufs, defaultEncoding) {\n    var b = [];\n    var charsProcessed = 0;\n    var invalidLE = 0, invalidBE = 0;   // Number of invalid chars when decoded as LE or BE.\n    var bmpCharsLE = 0, bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.\n\n    outer_loop:\n    for (var i = 0; i < bufs.length; i++) {\n        var buf = bufs[i];\n        for (var j = 0; j < buf.length; j++) {\n            b.push(buf[j]);\n            if (b.length === 4) {\n                if (charsProcessed === 0) {\n                    // Check BOM first.\n                    if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {\n                        return 'utf-32le';\n                    }\n                    if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {\n                        return 'utf-32be';\n                    }\n                }\n\n                if (b[0] !== 0 || b[1] > 0x10) invalidBE++;\n                if (b[3] !== 0 || b[2] > 0x10) invalidLE++;\n\n                if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;\n                if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;\n\n                b.length = 0;\n                charsProcessed++;\n\n                if (charsProcessed >= 100) {\n                    break outer_loop;\n                }\n            }\n        }\n    }\n\n    // Make decisions.\n    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)  return 'utf-32be';\n    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)  return 'utf-32le';\n\n    // Couldn't decide (likely all zeros or not enough data).\n    return defaultEncoding || 'utf-32le';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}