{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _ascent = _interopRequireDefault(require(\"../../run/ascent\"));\n\nvar _ascent2 = _interopRequireDefault(require(\"../../attributedString/ascent\"));\n\nvar _advanceWidth = _interopRequireDefault(require(\"../../run/advanceWidth\"));\n\nvar _advanceWidth2 = _interopRequireDefault(require(\"../../attributedString/advanceWidth\"));\n/* eslint-disable no-param-reassign */\n// The base font size used for calculating underline thickness.\n\n\nvar BASE_FONT_SIZE = 12;\n/**\n * Computes the intersections between an underline and the glyphs in\n * a line fragment. Returns an array of DecorationLines omitting the\n * intersections.\n */\n// const intersectWithGlyphs = (line, lineFragment) => {\n//   // Find intersection ranges between underline and glyphs\n//   let x = 0;\n//   let y = lineFragment.ascent;\n//   const ranges = [];\n//   for (const run of lineFragment.runs) {\n//     if (!run.attributes.underline) {\n//       x += run.advanceWidth;\n//       continue;\n//     }\n//     for (let i = 0; i < run.glyphs.length; i++) {\n//       const position = run.positions[i];\n//       if (x >= line.rect.x && x <= line.rect.maxX) {\n//         const gx = x + position.xOffset;\n//         const gy = y + position.yOffset;\n//         // Standard fonts may not have a path to intersect with\n//         if (run.glyphs[i].path) {\n//           const path = run.glyphs[i].path.scale(run.scale, -run.scale).translate(gx, gy);\n//           const range = findPathIntersections(path, line.rect);\n//           if (range) {\n//             ranges.push(range);\n//           }\n//         }\n//       }\n//       x += position.xAdvance;\n//       y += position.yAdvance;\n//     }\n//   }\n//   if (ranges.length === 0) {\n//     // No intersections. Return the original line.\n//     return [line];\n//   }\n//   const merged = Range.merge(ranges);\n//   // Generate underline segments omitting the intersections,\n//   // but only if the space warrents an underline.\n//   const lines = [];\n//   x = line.rect.x;\n//   for (const { start, end } of merged) {\n//     if (start - x > line.rect.height) {\n//       lines.push(line.slice(x, start));\n//     }\n//     x = end;\n//   }\n//   if (line.rect.maxX - x > line.rect.height) {\n//     lines.push(line.slice(x, line.rect.maxX));\n//   }\n//   return lines;\n// };\n// const findIntersectionPoint = (y, x1, y1, x2, y2, range) => {\n//   if ((y1 < y && y2 > y) || (y1 > y && y2 < y)) {\n//     const x = x1 + ((y - y1) * (x2 - x1)) / (y2 - y1);\n//     range.extend(x);\n//   }\n// };\n\n/**\n * Finds the intersections between a glyph path and an underline rectangle.\n * It models each contour of the path a straight line, and returns a range\n * containing the leftmost and rightmost intersection points, if any.\n */\n// const findPathIntersections = (path, rect) => {\n//   let sx = 0;\n//   let sy = 0;\n//   let cx = 0;\n//   let cy = 0;\n//   let px = 0;\n//   let py = 0;\n//   const range = new Range(Infinity, -Infinity);\n//   const y1 = rect.y;\n//   const y2 = rect.maxY;\n//   const dialation = Math.ceil(rect.height);\n//   for (const { command, args } of path.commands) {\n//     switch (command) {\n//       case 'moveTo':\n//         sx = cx = args[0];\n//         sy = cy = args[1];\n//         continue;\n//       case 'lineTo':\n//         px = args[0];\n//         py = args[1];\n//         break;\n//       case 'quadraticCurveTo':\n//         px = args[2];\n//         py = args[3];\n//         break;\n//       case 'bezierCurveTo':\n//         px = args[4];\n//         py = args[5];\n//         break;\n//       case 'closePath':\n//         px = sx;\n//         py = sy;\n//         break;\n//       default:\n//         break;\n//     }\n//     findIntersectionPoint(y1, cx, cy, px, py, range);\n//     findIntersectionPoint(y2, cx, cy, px, py, range);\n//     if ((cy >= y1 && cy <= y2) || (cy <= y1 && cy >= y2)) {\n//       range.extend(cx);\n//     }\n//     cx = px;\n//     cy = py;\n//   }\n//   if (range.start < range.end) {\n//     range.start -= dialation;\n//     range.end += dialation;\n//     return range;\n//   }\n//   return null;\n// };\n\n/**\n * A TextDecorationEngine is used by a Typesetter to generate\n * DecorationLines for a line fragment, including underlines\n * and strikes.\n */\n\nvar textDecoration = function textDecoration() {\n  return function (lineFragment) {\n    var x = R.propOr(0, 'overflowLeft', lineFragment);\n    var overflowRight = R.propOr(0, 'overflowRight', lineFragment);\n    var maxX = (0, _advanceWidth2.default)(lineFragment) - overflowRight;\n    lineFragment.decorationLines = [];\n\n    for (var i = 0; i < lineFragment.runs.length; i += 1) {\n      var run = lineFragment.runs[i];\n      var width = Math.min(maxX - x, (0, _advanceWidth.default)(run));\n      var thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));\n\n      if (run.attributes.underline) {\n        var rect = {\n          x: x,\n          y: (0, _ascent2.default)(lineFragment) + thickness * 2,\n          width: width,\n          height: thickness\n        };\n        var line = {\n          rect: rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.underlineColor || 'black',\n          style: run.attributes.underlineStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(line);\n      }\n\n      if (run.attributes.strike) {\n        var y = (0, _ascent2.default)(lineFragment) - (0, _ascent.default)(run) / 3;\n        var _rect = {\n          x: x,\n          y: y,\n          width: width,\n          height: thickness\n        };\n        var _line = {\n          rect: _rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.strikeColor || 'black',\n          style: run.attributes.strikeStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(_line);\n      }\n\n      x += width;\n    } // Adjust underline y positions, and intersect with glyph descenders.\n    // for (const line of underlines) {\n    //   lineFragment.decorationLines.push(...intersectWithGlyphs(line, lineFragment));\n    // }\n\n\n    return lineFragment;\n  };\n};\n\nvar _default = textDecoration;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","_ascent","_ascent2","_advanceWidth","_advanceWidth2","BASE_FONT_SIZE","textDecoration","lineFragment","x","propOr","overflowRight","maxX","decorationLines","i","runs","length","run","width","Math","min","thickness","max","floor","attributes","fontSize","underline","rect","y","height","line","opacity","color","underlineColor","style","underlineStyle","push","strike","_rect","_line","strikeColor","strikeStyle","_default"],"sources":["/home/carlobottaro/Documents/UniversitÃ /gamification/node_modules/@react-pdf/textkit/lib/engines/textDecoration/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _ascent = _interopRequireDefault(require(\"../../run/ascent\"));\n\nvar _ascent2 = _interopRequireDefault(require(\"../../attributedString/ascent\"));\n\nvar _advanceWidth = _interopRequireDefault(require(\"../../run/advanceWidth\"));\n\nvar _advanceWidth2 = _interopRequireDefault(require(\"../../attributedString/advanceWidth\"));\n\n/* eslint-disable no-param-reassign */\n// The base font size used for calculating underline thickness.\nvar BASE_FONT_SIZE = 12;\n/**\n * Computes the intersections between an underline and the glyphs in\n * a line fragment. Returns an array of DecorationLines omitting the\n * intersections.\n */\n// const intersectWithGlyphs = (line, lineFragment) => {\n//   // Find intersection ranges between underline and glyphs\n//   let x = 0;\n//   let y = lineFragment.ascent;\n//   const ranges = [];\n//   for (const run of lineFragment.runs) {\n//     if (!run.attributes.underline) {\n//       x += run.advanceWidth;\n//       continue;\n//     }\n//     for (let i = 0; i < run.glyphs.length; i++) {\n//       const position = run.positions[i];\n//       if (x >= line.rect.x && x <= line.rect.maxX) {\n//         const gx = x + position.xOffset;\n//         const gy = y + position.yOffset;\n//         // Standard fonts may not have a path to intersect with\n//         if (run.glyphs[i].path) {\n//           const path = run.glyphs[i].path.scale(run.scale, -run.scale).translate(gx, gy);\n//           const range = findPathIntersections(path, line.rect);\n//           if (range) {\n//             ranges.push(range);\n//           }\n//         }\n//       }\n//       x += position.xAdvance;\n//       y += position.yAdvance;\n//     }\n//   }\n//   if (ranges.length === 0) {\n//     // No intersections. Return the original line.\n//     return [line];\n//   }\n//   const merged = Range.merge(ranges);\n//   // Generate underline segments omitting the intersections,\n//   // but only if the space warrents an underline.\n//   const lines = [];\n//   x = line.rect.x;\n//   for (const { start, end } of merged) {\n//     if (start - x > line.rect.height) {\n//       lines.push(line.slice(x, start));\n//     }\n//     x = end;\n//   }\n//   if (line.rect.maxX - x > line.rect.height) {\n//     lines.push(line.slice(x, line.rect.maxX));\n//   }\n//   return lines;\n// };\n// const findIntersectionPoint = (y, x1, y1, x2, y2, range) => {\n//   if ((y1 < y && y2 > y) || (y1 > y && y2 < y)) {\n//     const x = x1 + ((y - y1) * (x2 - x1)) / (y2 - y1);\n//     range.extend(x);\n//   }\n// };\n\n/**\n * Finds the intersections between a glyph path and an underline rectangle.\n * It models each contour of the path a straight line, and returns a range\n * containing the leftmost and rightmost intersection points, if any.\n */\n// const findPathIntersections = (path, rect) => {\n//   let sx = 0;\n//   let sy = 0;\n//   let cx = 0;\n//   let cy = 0;\n//   let px = 0;\n//   let py = 0;\n//   const range = new Range(Infinity, -Infinity);\n//   const y1 = rect.y;\n//   const y2 = rect.maxY;\n//   const dialation = Math.ceil(rect.height);\n//   for (const { command, args } of path.commands) {\n//     switch (command) {\n//       case 'moveTo':\n//         sx = cx = args[0];\n//         sy = cy = args[1];\n//         continue;\n//       case 'lineTo':\n//         px = args[0];\n//         py = args[1];\n//         break;\n//       case 'quadraticCurveTo':\n//         px = args[2];\n//         py = args[3];\n//         break;\n//       case 'bezierCurveTo':\n//         px = args[4];\n//         py = args[5];\n//         break;\n//       case 'closePath':\n//         px = sx;\n//         py = sy;\n//         break;\n//       default:\n//         break;\n//     }\n//     findIntersectionPoint(y1, cx, cy, px, py, range);\n//     findIntersectionPoint(y2, cx, cy, px, py, range);\n//     if ((cy >= y1 && cy <= y2) || (cy <= y1 && cy >= y2)) {\n//       range.extend(cx);\n//     }\n//     cx = px;\n//     cy = py;\n//   }\n//   if (range.start < range.end) {\n//     range.start -= dialation;\n//     range.end += dialation;\n//     return range;\n//   }\n//   return null;\n// };\n\n/**\n * A TextDecorationEngine is used by a Typesetter to generate\n * DecorationLines for a line fragment, including underlines\n * and strikes.\n */\n\nvar textDecoration = function textDecoration() {\n  return function (lineFragment) {\n    var x = R.propOr(0, 'overflowLeft', lineFragment);\n    var overflowRight = R.propOr(0, 'overflowRight', lineFragment);\n    var maxX = (0, _advanceWidth2.default)(lineFragment) - overflowRight;\n    lineFragment.decorationLines = [];\n\n    for (var i = 0; i < lineFragment.runs.length; i += 1) {\n      var run = lineFragment.runs[i];\n      var width = Math.min(maxX - x, (0, _advanceWidth.default)(run));\n      var thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));\n\n      if (run.attributes.underline) {\n        var rect = {\n          x: x,\n          y: (0, _ascent2.default)(lineFragment) + thickness * 2,\n          width: width,\n          height: thickness\n        };\n        var line = {\n          rect: rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.underlineColor || 'black',\n          style: run.attributes.underlineStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(line);\n      }\n\n      if (run.attributes.strike) {\n        var y = (0, _ascent2.default)(lineFragment) - (0, _ascent.default)(run) / 3;\n        var _rect = {\n          x: x,\n          y: y,\n          width: width,\n          height: thickness\n        };\n        var _line = {\n          rect: _rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.strikeColor || 'black',\n          style: run.attributes.strikeStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(_line);\n      }\n\n      x += width;\n    } // Adjust underline y positions, and intersect with glyph descenders.\n    // for (const line of underlines) {\n    //   lineFragment.decorationLines.push(...intersectWithGlyphs(line, lineFragment));\n    // }\n\n\n    return lineFragment;\n  };\n};\n\nvar _default = textDecoration;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}