{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _empty = _interopRequireDefault(require(\"../run/empty\"));\n\nvar _append = _interopRequireDefault(require(\"../run/append\"));\n\nvar _stringFromCodePoints = _interopRequireDefault(require(\"../utils/stringFromCodePoints\"));\n/**\n * Append glyph into last run of attributed string\n *\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\n\n\nvar append = function append(glyph, string) {\n  var codePoints = R.propOr([], 'codePoints')(glyph);\n  return R.evolve({\n    string: R.concat(R.__, (0, _stringFromCodePoints.default)(codePoints)),\n    runs: R.converge(R.concat, [R.init, R.compose(R.unapply(R.identity), (0, _append.default)(glyph), R.either(R.last, _empty.default))])\n  })(string);\n};\n\nvar _default = R.curryN(2, append);\n\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","_empty","_append","_stringFromCodePoints","append","glyph","string","codePoints","propOr","evolve","concat","__","runs","converge","init","compose","unapply","identity","either","last","_default","curryN"],"sources":["/home/carlobottaro/Documents/Universit√†/gamification/node_modules/@react-pdf/textkit/lib/attributedString/append.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _empty = _interopRequireDefault(require(\"../run/empty\"));\n\nvar _append = _interopRequireDefault(require(\"../run/append\"));\n\nvar _stringFromCodePoints = _interopRequireDefault(require(\"../utils/stringFromCodePoints\"));\n\n/**\n * Append glyph into last run of attributed string\n *\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar append = function append(glyph, string) {\n  var codePoints = R.propOr([], 'codePoints')(glyph);\n  return R.evolve({\n    string: R.concat(R.__, (0, _stringFromCodePoints.default)(codePoints)),\n    runs: R.converge(R.concat, [R.init, R.compose(R.unapply(R.identity), (0, _append.default)(glyph), R.either(R.last, _empty.default))])\n  })(string);\n};\n\nvar _default = R.curryN(2, append);\n\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEA,IAAIC,uBAAuB,GAAGF,OAAO,CAAC,+CAAD,CAAP,CAAyDC,OAAvF;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACF,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAII,CAAC,GAAGH,uBAAuB,CAACF,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,MAAM,GAAGP,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAnC;;AAEA,IAAIO,OAAO,GAAGR,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAApC;;AAEA,IAAIQ,qBAAqB,GAAGT,sBAAsB,CAACC,OAAO,CAAC,+BAAD,CAAR,CAAlD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIS,MAAM,GAAG,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+B;EAC1C,IAAIC,UAAU,GAAGP,CAAC,CAACQ,MAAF,CAAS,EAAT,EAAa,YAAb,EAA2BH,KAA3B,CAAjB;EACA,OAAOL,CAAC,CAACS,MAAF,CAAS;IACdH,MAAM,EAAEN,CAAC,CAACU,MAAF,CAASV,CAAC,CAACW,EAAX,EAAe,CAAC,GAAGR,qBAAqB,CAACP,OAA1B,EAAmCW,UAAnC,CAAf,CADM;IAEdK,IAAI,EAAEZ,CAAC,CAACa,QAAF,CAAWb,CAAC,CAACU,MAAb,EAAqB,CAACV,CAAC,CAACc,IAAH,EAASd,CAAC,CAACe,OAAF,CAAUf,CAAC,CAACgB,OAAF,CAAUhB,CAAC,CAACiB,QAAZ,CAAV,EAAiC,CAAC,GAAGf,OAAO,CAACN,OAAZ,EAAqBS,KAArB,CAAjC,EAA8DL,CAAC,CAACkB,MAAF,CAASlB,CAAC,CAACmB,IAAX,EAAiBlB,MAAM,CAACL,OAAxB,CAA9D,CAAT,CAArB;EAFQ,CAAT,EAGJU,MAHI,CAAP;AAID,CAND;;AAQA,IAAIc,QAAQ,GAAGpB,CAAC,CAACqB,MAAF,CAAS,CAAT,EAAYjB,MAAZ,CAAf;;AAEAN,OAAO,CAACF,OAAR,GAAkBwB,QAAlB"},"metadata":{},"sourceType":"script"}