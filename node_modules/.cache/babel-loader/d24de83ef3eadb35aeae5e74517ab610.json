{"ast":null,"code":"import _isArray from './_isArray.js';\nimport _isTransformer from './_isTransformer.js';\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}","map":{"version":3,"names":["_isArray","_isTransformer","_dispatchable","methodNames","xf","fn","arguments","length","args","Array","prototype","slice","call","obj","pop","idx","apply","transducer"],"sources":["/home/carlobottaro/Documents/UniversitÃ /gamification/node_modules/ramda/es/internal/_dispatchable.js"],"sourcesContent":["import _isArray from './_isArray.js';\nimport _isTransformer from './_isTransformer.js';\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,WAAvB,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4C;EACzD,OAAO,YAAY;IACjB,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;MAC1B,OAAOF,EAAE,EAAT;IACD;;IACD,IAAIG,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,SAA3B,EAAsC,CAAtC,CAAX;IACA,IAAIO,GAAG,GAAGL,IAAI,CAACM,GAAL,EAAV;;IACA,IAAI,CAACd,QAAQ,CAACa,GAAD,CAAb,EAAoB;MAClB,IAAIE,GAAG,GAAG,CAAV;;MACA,OAAOA,GAAG,GAAGZ,WAAW,CAACI,MAAzB,EAAiC;QAC/B,IAAI,OAAOM,GAAG,CAACV,WAAW,CAACY,GAAD,CAAZ,CAAV,KAAiC,UAArC,EAAiD;UAC/C,OAAOF,GAAG,CAACV,WAAW,CAACY,GAAD,CAAZ,CAAH,CAAsBC,KAAtB,CAA4BH,GAA5B,EAAiCL,IAAjC,CAAP;QACD;;QACDO,GAAG,IAAI,CAAP;MACD;;MACD,IAAId,cAAc,CAACY,GAAD,CAAlB,EAAyB;QACvB,IAAII,UAAU,GAAGb,EAAE,CAACY,KAAH,CAAS,IAAT,EAAeR,IAAf,CAAjB;QACA,OAAOS,UAAU,CAACJ,GAAD,CAAjB;MACD;IACF;;IACD,OAAOR,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeV,SAAf,CAAP;EACD,CApBD;AAqBD"},"metadata":{},"sourceType":"module"}