{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _hyphen = _interopRequireDefault(require(\"hyphen\"));\n\nvar _enUs = _interopRequireDefault(require(\"hyphen/patterns/en-us\"));\n\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = (0, _hyphen.default)(_enUs.default);\nvar splitHyphen = R.split(SOFT_HYPHEN);\nvar cache = {};\nvar getParts = R.ifElse(R.contains(SOFT_HYPHEN), splitHyphen, R.o(splitHyphen, hyphenator));\n\nvar wordHyphenation = function wordHyphenation(options, word) {\n  var cacheKey = \"_\" + word;\n  if (R.isNil(word)) return [];\n  if (cache[cacheKey]) return cache[cacheKey];\n  cache[cacheKey] = getParts(word);\n  return cache[cacheKey];\n};\n\nvar _default = R.curryN(2, wordHyphenation);\n\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","_hyphen","_enUs","SOFT_HYPHEN","hyphenator","splitHyphen","split","cache","getParts","ifElse","contains","o","wordHyphenation","options","word","cacheKey","isNil","_default","curryN"],"sources":["/home/carlobottaro/Documents/Universit√†/gamification/node_modules/@react-pdf/textkit/lib/engines/wordHyphenation/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _hyphen = _interopRequireDefault(require(\"hyphen\"));\n\nvar _enUs = _interopRequireDefault(require(\"hyphen/patterns/en-us\"));\n\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = (0, _hyphen.default)(_enUs.default);\nvar splitHyphen = R.split(SOFT_HYPHEN);\nvar cache = {};\nvar getParts = R.ifElse(R.contains(SOFT_HYPHEN), splitHyphen, R.o(splitHyphen, hyphenator));\n\nvar wordHyphenation = function wordHyphenation(options, word) {\n  var cacheKey = \"_\" + word;\n  if (R.isNil(word)) return [];\n  if (cache[cacheKey]) return cache[cacheKey];\n  cache[cacheKey] = getParts(word);\n  return cache[cacheKey];\n};\n\nvar _default = R.curryN(2, wordHyphenation);\n\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEA,IAAIC,uBAAuB,GAAGF,OAAO,CAAC,+CAAD,CAAP,CAAyDC,OAAvF;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACF,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAII,CAAC,GAAGH,uBAAuB,CAACF,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,OAAO,GAAGP,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,IAAIO,KAAK,GAAGR,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAAlC;;AAEA,IAAIQ,WAAW,GAAG,MAAlB;AACA,IAAIC,UAAU,GAAG,CAAC,GAAGH,OAAO,CAACL,OAAZ,EAAqBM,KAAK,CAACN,OAA3B,CAAjB;AACA,IAAIS,WAAW,GAAGL,CAAC,CAACM,KAAF,CAAQH,WAAR,CAAlB;AACA,IAAII,KAAK,GAAG,EAAZ;AACA,IAAIC,QAAQ,GAAGR,CAAC,CAACS,MAAF,CAAST,CAAC,CAACU,QAAF,CAAWP,WAAX,CAAT,EAAkCE,WAAlC,EAA+CL,CAAC,CAACW,CAAF,CAAIN,WAAJ,EAAiBD,UAAjB,CAA/C,CAAf;;AAEA,IAAIQ,eAAe,GAAG,SAASA,eAAT,CAAyBC,OAAzB,EAAkCC,IAAlC,EAAwC;EAC5D,IAAIC,QAAQ,GAAG,MAAMD,IAArB;EACA,IAAId,CAAC,CAACgB,KAAF,CAAQF,IAAR,CAAJ,EAAmB,OAAO,EAAP;EACnB,IAAIP,KAAK,CAACQ,QAAD,CAAT,EAAqB,OAAOR,KAAK,CAACQ,QAAD,CAAZ;EACrBR,KAAK,CAACQ,QAAD,CAAL,GAAkBP,QAAQ,CAACM,IAAD,CAA1B;EACA,OAAOP,KAAK,CAACQ,QAAD,CAAZ;AACD,CAND;;AAQA,IAAIE,QAAQ,GAAGjB,CAAC,CAACkB,MAAF,CAAS,CAAT,EAAYN,eAAZ,CAAf;;AAEAd,OAAO,CAACF,OAAR,GAAkBqB,QAAlB"},"metadata":{},"sourceType":"script"}