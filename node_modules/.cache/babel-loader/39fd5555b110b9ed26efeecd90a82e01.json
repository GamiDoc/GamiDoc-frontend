{"ast":null,"code":"module.exports = parse;\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {\n  a: 7,\n  c: 6,\n  h: 1,\n  l: 2,\n  m: 2,\n  q: 4,\n  s: 4,\n  t: 2,\n  v: 1,\n  z: 0\n};\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n  var data = [];\n  path.replace(segment, function (_, command, args) {\n    var type = command.toLowerCase();\n    args = parseValues(args); // overloaded moveTo\n\n    if (type == 'm' && args.length > 2) {\n      data.push([command].concat(args.splice(0, 2)));\n      type = 'l';\n      command = command == 'm' ? 'l' : 'L';\n    }\n\n    while (true) {\n      if (args.length == length[type]) {\n        args.unshift(command);\n        return data.push(args);\n      }\n\n      if (args.length < length[type]) throw new Error('malformed path data');\n      data.push([command].concat(args.splice(0, length[type])));\n    }\n  });\n  return data;\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig;\n\nfunction parseValues(args) {\n  var numbers = args.match(number);\n  return numbers ? numbers.map(Number) : [];\n}","map":{"version":3,"names":["module","exports","parse","length","a","c","h","l","m","q","s","t","v","z","segment","path","data","replace","_","command","args","type","toLowerCase","parseValues","push","concat","splice","unshift","Error","number","numbers","match","map","Number"],"sources":["/home/carlobottaro/Documents/UniversitÃ /gamification/node_modules/parse-svg-path/index.js"],"sourcesContent":["\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n"],"mappings":"AACAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAG;EAACC,CAAC,EAAE,CAAJ;EAAOC,CAAC,EAAE,CAAV;EAAaC,CAAC,EAAE,CAAhB;EAAmBC,CAAC,EAAE,CAAtB;EAAyBC,CAAC,EAAE,CAA5B;EAA+BC,CAAC,EAAE,CAAlC;EAAqCC,CAAC,EAAE,CAAxC;EAA2CC,CAAC,EAAE,CAA9C;EAAiDC,CAAC,EAAE,CAApD;EAAuDC,CAAC,EAAE;AAA1D,CAAb;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GAAG,kCAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASZ,KAAT,CAAea,IAAf,EAAqB;EACpB,IAAIC,IAAI,GAAG,EAAX;EACAD,IAAI,CAACE,OAAL,CAAaH,OAAb,EAAsB,UAASI,CAAT,EAAYC,OAAZ,EAAqBC,IAArB,EAA0B;IAC/C,IAAIC,IAAI,GAAGF,OAAO,CAACG,WAAR,EAAX;IACAF,IAAI,GAAGG,WAAW,CAACH,IAAD,CAAlB,CAF+C,CAI/C;;IACA,IAAIC,IAAI,IAAI,GAAR,IAAeD,IAAI,CAACjB,MAAL,GAAc,CAAjC,EAAoC;MACnCa,IAAI,CAACQ,IAAL,CAAU,CAACL,OAAD,EAAUM,MAAV,CAAiBL,IAAI,CAACM,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAjB,CAAV;MACAL,IAAI,GAAG,GAAP;MACAF,OAAO,GAAGA,OAAO,IAAI,GAAX,GAAiB,GAAjB,GAAuB,GAAjC;IACA;;IAED,OAAO,IAAP,EAAa;MACZ,IAAIC,IAAI,CAACjB,MAAL,IAAeA,MAAM,CAACkB,IAAD,CAAzB,EAAiC;QAChCD,IAAI,CAACO,OAAL,CAAaR,OAAb;QACA,OAAOH,IAAI,CAACQ,IAAL,CAAUJ,IAAV,CAAP;MACA;;MACD,IAAIA,IAAI,CAACjB,MAAL,GAAcA,MAAM,CAACkB,IAAD,CAAxB,EAAgC,MAAM,IAAIO,KAAJ,CAAU,qBAAV,CAAN;MAChCZ,IAAI,CAACQ,IAAL,CAAU,CAACL,OAAD,EAAUM,MAAV,CAAiBL,IAAI,CAACM,MAAL,CAAY,CAAZ,EAAevB,MAAM,CAACkB,IAAD,CAArB,CAAjB,CAAV;IACA;EACD,CAnBD;EAoBA,OAAOL,IAAP;AACA;;AAED,IAAIa,MAAM,GAAG,mCAAb;;AAEA,SAASN,WAAT,CAAqBH,IAArB,EAA2B;EAC1B,IAAIU,OAAO,GAAGV,IAAI,CAACW,KAAL,CAAWF,MAAX,CAAd;EACA,OAAOC,OAAO,GAAGA,OAAO,CAACE,GAAR,CAAYC,MAAZ,CAAH,GAAyB,EAAvC;AACA"},"metadata":{},"sourceType":"script"}