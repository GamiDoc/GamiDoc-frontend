{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _Set from './internal/_Set.js';\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\n\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  var secondLen = second.length;\n  var toFilterOut = new _Set();\n\n  for (var i = 0; i < secondLen; i += 1) {\n    toFilterOut.add(second[i]);\n  }\n\n  while (idx < firstLen) {\n    if (toFilterOut.add(first[idx])) {\n      out[out.length] = first[idx];\n    }\n\n    idx += 1;\n  }\n\n  return out;\n});\n\nexport default difference;","map":{"version":3,"names":["_curry2","_Set","difference","first","second","out","idx","firstLen","length","secondLen","toFilterOut","i","add"],"sources":["/home/carlobottaro/Documents/UniversitÃ /gamification/node_modules/ramda/es/difference.js"],"sourcesContent":["import _curry2 from './internal/_curry2.js';\nimport _Set from './internal/_Set.js';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  var secondLen = second.length;\n  var toFilterOut = new _Set();\n\n  for (var i = 0; i < secondLen; i += 1) {\n    toFilterOut.add(second[i]);\n  }\n\n  while (idx < firstLen) {\n    if (toFilterOut.add(first[idx])) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default difference;"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,aAAaF,OAAO,CAAC,SAASE,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;EACvE,IAAIC,GAAG,GAAG,EAAV;EACA,IAAIC,GAAG,GAAG,CAAV;EACA,IAAIC,QAAQ,GAAGJ,KAAK,CAACK,MAArB;EACA,IAAIC,SAAS,GAAGL,MAAM,CAACI,MAAvB;EACA,IAAIE,WAAW,GAAG,IAAIT,IAAJ,EAAlB;;EAEA,KAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,IAAI,CAApC,EAAuC;IACrCD,WAAW,CAACE,GAAZ,CAAgBR,MAAM,CAACO,CAAD,CAAtB;EACD;;EAED,OAAOL,GAAG,GAAGC,QAAb,EAAuB;IACrB,IAAIG,WAAW,CAACE,GAAZ,CAAgBT,KAAK,CAACG,GAAD,CAArB,CAAJ,EAAiC;MAC/BD,GAAG,CAACA,GAAG,CAACG,MAAL,CAAH,GAAkBL,KAAK,CAACG,GAAD,CAAvB;IACD;;IACDA,GAAG,IAAI,CAAP;EACD;;EACD,OAAOD,GAAP;AACD,CAlBoC,CAArC;;AAmBA,eAAeH,UAAf"},"metadata":{},"sourceType":"module"}