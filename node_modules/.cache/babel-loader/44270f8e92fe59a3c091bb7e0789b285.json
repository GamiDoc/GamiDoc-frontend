{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n/* eslint-disable no-param-reassign */\n\n\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNotSvg = R.complement(isSvg);\nvar isNotText = R.complement(isText);\n\nvar shouldIterate = function shouldIterate(node) {\n  return isNotSvg(node) && isNotText(node);\n};\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  if (shouldLayoutText(node)) {\n    var width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    var height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n    node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n  }\n\n  if (shouldIterate(node)) {\n    var mapChild = function mapChild(child) {\n      return resolveTextLayout(child, fontStore);\n    };\n\n    return R.evolve({\n      children: R.map(mapChild)\n    })(node);\n  }\n\n  return node;\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","P","_layoutText","isType","propEq","isSvg","Svg","isText","Text","isNotSvg","complement","isNotText","shouldIterate","node","shouldLayoutText","lines","resolveTextLayout","fontStore","width","box","paddingRight","paddingLeft","height","paddingTop","paddingBottom","mapChild","child","evolve","children","map","_default"],"sources":["/home/carlobottaro/Documents/Universit√†/gamification/node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\n/* eslint-disable no-param-reassign */\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNotSvg = R.complement(isSvg);\nvar isNotText = R.complement(isText);\n\nvar shouldIterate = function shouldIterate(node) {\n  return isNotSvg(node) && isNotText(node);\n};\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  if (shouldLayoutText(node)) {\n    var width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    var height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n    node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n  }\n\n  if (shouldIterate(node)) {\n    var mapChild = function mapChild(child) {\n      return resolveTextLayout(child, fontStore);\n    };\n\n    return R.evolve({\n      children: R.map(mapChild)\n    })(node);\n  }\n\n  return node;\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAAP,CAAwDC,OAArF;;AAEA,IAAIC,uBAAuB,GAAGF,OAAO,CAAC,+CAAD,CAAP,CAAyDC,OAAvF;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACF,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAII,CAAC,GAAGH,uBAAuB,CAACF,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,CAAC,GAAGJ,uBAAuB,CAACF,OAAO,CAAC,uBAAD,CAAR,CAA/B;;AAEA,IAAIO,WAAW,GAAGR,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAxC;AAEA;;;AACA,IAAIQ,MAAM,GAAGH,CAAC,CAACI,MAAF,CAAS,MAAT,CAAb;AACA,IAAIC,KAAK,GAAGF,MAAM,CAACF,CAAC,CAACK,GAAH,CAAlB;AACA,IAAIC,MAAM,GAAGJ,MAAM,CAACF,CAAC,CAACO,IAAH,CAAnB;AACA,IAAIC,QAAQ,GAAGT,CAAC,CAACU,UAAF,CAAaL,KAAb,CAAf;AACA,IAAIM,SAAS,GAAGX,CAAC,CAACU,UAAF,CAAaH,MAAb,CAAhB;;AAEA,IAAIK,aAAa,GAAG,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;EAC/C,OAAOJ,QAAQ,CAACI,IAAD,CAAR,IAAkBF,SAAS,CAACE,IAAD,CAAlC;AACD,CAFD;;AAIA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BD,IAA1B,EAAgC;EACrD,OAAON,MAAM,CAACM,IAAD,CAAN,IAAgB,CAACA,IAAI,CAACE,KAA7B;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BH,IAA3B,EAAiCI,SAAjC,EAA4C;EAClE,IAAIH,gBAAgB,CAACD,IAAD,CAApB,EAA4B;IAC1B,IAAIK,KAAK,GAAGL,IAAI,CAACM,GAAL,CAASD,KAAT,IAAkBL,IAAI,CAACM,GAAL,CAASC,YAAT,GAAwBP,IAAI,CAACM,GAAL,CAASE,WAAnD,CAAZ;IACA,IAAIC,MAAM,GAAGT,IAAI,CAACM,GAAL,CAASG,MAAT,IAAmBT,IAAI,CAACM,GAAL,CAASI,UAAT,GAAsBV,IAAI,CAACM,GAAL,CAASK,aAAlD,CAAb;IACAX,IAAI,CAACE,KAAL,GAAa,CAAC,GAAGb,WAAW,CAACN,OAAhB,EAAyBiB,IAAzB,EAA+BK,KAA/B,EAAsCI,MAAtC,EAA8CL,SAA9C,CAAb;EACD;;EAED,IAAIL,aAAa,CAACC,IAAD,CAAjB,EAAyB;IACvB,IAAIY,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;MACtC,OAAOV,iBAAiB,CAACU,KAAD,EAAQT,SAAR,CAAxB;IACD,CAFD;;IAIA,OAAOjB,CAAC,CAAC2B,MAAF,CAAS;MACdC,QAAQ,EAAE5B,CAAC,CAAC6B,GAAF,CAAMJ,QAAN;IADI,CAAT,EAEJZ,IAFI,CAAP;EAGD;;EAED,OAAOA,IAAP;AACD,CAlBD;;AAoBA,IAAIiB,QAAQ,GAAGd,iBAAf;AACAlB,OAAO,CAACF,OAAR,GAAkBkC,QAAlB"},"metadata":{},"sourceType":"script"}