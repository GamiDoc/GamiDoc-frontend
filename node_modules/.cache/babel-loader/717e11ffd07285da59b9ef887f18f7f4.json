{"ast":null,"code":"import _cloneRegExp from './_cloneRegExp.js';\nimport type from '../type.js';\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\n\nexport default function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n\n      idx += 1;\n    }\n\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n\n    for (var key in value) {\n      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n\n    return copiedValue;\n  };\n\n  switch (type(value)) {\n    case 'Object':\n      return copy({});\n\n    case 'Array':\n      return copy([]);\n\n    case 'Date':\n      return new Date(value.valueOf());\n\n    case 'RegExp':\n      return _cloneRegExp(value);\n\n    default:\n      return value;\n  }\n}","map":{"version":3,"names":["_cloneRegExp","type","_clone","value","refFrom","refTo","deep","copy","copiedValue","len","length","idx","key","Date","valueOf"],"sources":["/home/carlobottaro/Documents/UniversitÃ /gamification/node_modules/ramda/es/internal/_clone.js"],"sourcesContent":["import _cloneRegExp from './_cloneRegExp.js';\nimport type from '../type.js';\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nexport default function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n      idx += 1;\n    }\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n    for (var key in value) {\n      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':\n      return copy({});\n    case 'Array':\n      return copy([]);\n    case 'Date':\n      return new Date(value.valueOf());\n    case 'RegExp':\n      return _cloneRegExp(value);\n    default:\n      return value;\n  }\n}"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;EAC1D,IAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,WAAd,EAA2B;IACpC,IAAIC,GAAG,GAAGL,OAAO,CAACM,MAAlB;IACA,IAAIC,GAAG,GAAG,CAAV;;IACA,OAAOA,GAAG,GAAGF,GAAb,EAAkB;MAChB,IAAIN,KAAK,KAAKC,OAAO,CAACO,GAAD,CAArB,EAA4B;QAC1B,OAAON,KAAK,CAACM,GAAD,CAAZ;MACD;;MACDA,GAAG,IAAI,CAAP;IACD;;IACDP,OAAO,CAACO,GAAG,GAAG,CAAP,CAAP,GAAmBR,KAAnB;IACAE,KAAK,CAACM,GAAG,GAAG,CAAP,CAAL,GAAiBH,WAAjB;;IACA,KAAK,IAAII,GAAT,IAAgBT,KAAhB,EAAuB;MACrBK,WAAW,CAACI,GAAD,CAAX,GAAmBN,IAAI,GAAGJ,MAAM,CAACC,KAAK,CAACS,GAAD,CAAN,EAAaR,OAAb,EAAsBC,KAAtB,EAA6B,IAA7B,CAAT,GAA8CF,KAAK,CAACS,GAAD,CAA1E;IACD;;IACD,OAAOJ,WAAP;EACD,CAfD;;EAgBA,QAAQP,IAAI,CAACE,KAAD,CAAZ;IACE,KAAK,QAAL;MACE,OAAOI,IAAI,CAAC,EAAD,CAAX;;IACF,KAAK,OAAL;MACE,OAAOA,IAAI,CAAC,EAAD,CAAX;;IACF,KAAK,MAAL;MACE,OAAO,IAAIM,IAAJ,CAASV,KAAK,CAACW,OAAN,EAAT,CAAP;;IACF,KAAK,QAAL;MACE,OAAOd,YAAY,CAACG,KAAD,CAAnB;;IACF;MACE,OAAOA,KAAP;EAVJ;AAYD"},"metadata":{},"sourceType":"module"}