{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\nimport apply from './apply.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\nimport keys from './keys.js';\nimport values from './values.js'; // Use custom mapValues function to avoid issues with specs that include a \"map\" key and R.map\n// delegating calls to .map\n\nfunction mapValues(fn, obj) {\n  return keys(obj).reduce(function (acc, key) {\n    acc[key] = fn(obj[key]);\n    return acc;\n  }, {});\n}\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      const getMetrics = R.applySpec({\n *        sum: R.add,\n *        nested: { mul: R.multiply }\n *      });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\n\n\nvar applySpec = /*#__PURE__*/_curry1(function applySpec(spec) {\n  spec = mapValues(function (v) {\n    return typeof v == 'function' ? v : applySpec(v);\n  }, spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n    var args = arguments;\n    return mapValues(function (f) {\n      return apply(f, args);\n    }, spec);\n  });\n});\n\nexport default applySpec;","map":{"version":3,"names":["_curry1","apply","curryN","max","pluck","reduce","keys","values","mapValues","fn","obj","acc","key","applySpec","spec","v","args","arguments","f"],"sources":["/home/carlobottaro/Documents/UniversitÃ /gamification/node_modules/ramda/es/applySpec.js"],"sourcesContent":["import _curry1 from './internal/_curry1.js';\nimport apply from './apply.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\nimport keys from './keys.js';\nimport values from './values.js';\n\n// Use custom mapValues function to avoid issues with specs that include a \"map\" key and R.map\n// delegating calls to .map\nfunction mapValues(fn, obj) {\n  return keys(obj).reduce(function (acc, key) {\n    acc[key] = fn(obj[key]);\n    return acc;\n  }, {});\n}\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      const getMetrics = R.applySpec({\n *        sum: R.add,\n *        nested: { mul: R.multiply }\n *      });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nvar applySpec = /*#__PURE__*/_curry1(function applySpec(spec) {\n  spec = mapValues(function (v) {\n    return typeof v == 'function' ? v : applySpec(v);\n  }, spec);\n\n  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n    var args = arguments;\n    return mapValues(function (f) {\n      return apply(f, args);\n    }, spec);\n  });\n});\nexport default applySpec;"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;AACA;;AACA,SAASC,SAAT,CAAmBC,EAAnB,EAAuBC,GAAvB,EAA4B;EAC1B,OAAOJ,IAAI,CAACI,GAAD,CAAJ,CAAUL,MAAV,CAAiB,UAAUM,GAAV,EAAeC,GAAf,EAAoB;IAC1CD,GAAG,CAACC,GAAD,CAAH,GAAWH,EAAE,CAACC,GAAG,CAACE,GAAD,CAAJ,CAAb;IACA,OAAOD,GAAP;EACD,CAHM,EAGJ,EAHI,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,SAAS,GAAG,aAAab,OAAO,CAAC,SAASa,SAAT,CAAmBC,IAAnB,EAAyB;EAC5DA,IAAI,GAAGN,SAAS,CAAC,UAAUO,CAAV,EAAa;IAC5B,OAAO,OAAOA,CAAP,IAAY,UAAZ,GAAyBA,CAAzB,GAA6BF,SAAS,CAACE,CAAD,CAA7C;EACD,CAFe,EAEbD,IAFa,CAAhB;EAIA,OAAOZ,MAAM,CAACG,MAAM,CAACF,GAAD,EAAM,CAAN,EAASC,KAAK,CAAC,QAAD,EAAWG,MAAM,CAACO,IAAD,CAAjB,CAAd,CAAP,EAAgD,YAAY;IACvE,IAAIE,IAAI,GAAGC,SAAX;IACA,OAAOT,SAAS,CAAC,UAAUU,CAAV,EAAa;MAC5B,OAAOjB,KAAK,CAACiB,CAAD,EAAIF,IAAJ,CAAZ;IACD,CAFe,EAEbF,IAFa,CAAhB;EAGD,CALY,CAAb;AAMD,CAXmC,CAApC;;AAYA,eAAeD,SAAf"},"metadata":{},"sourceType":"module"}