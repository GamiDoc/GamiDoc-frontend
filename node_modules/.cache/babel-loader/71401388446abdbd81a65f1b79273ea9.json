{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _bestFit = _interopRequireDefault(require(\"./bestFit\"));\n\nvar _linebreak = _interopRequireDefault(require(\"./linebreak\"));\n\nvar _slice = _interopRequireDefault(require(\"../../attributedString/slice\"));\n\nvar _insertGlyph = _interopRequireDefault(require(\"../../attributedString/insertGlyph\"));\n\nvar _advanceWidthBetween = _interopRequireDefault(require(\"../../attributedString/advanceWidthBetween\"));\n\nvar HYPHEN = 0x002d;\nvar TOLERANCE_STEPS = 5;\nvar TOLERANCE_LIMIT = 50;\nvar opts = {\n  width: 3,\n  stretch: 6,\n  shrink: 9\n};\n/**\n * Slice attributed string to many lines\n *\n * @param {Object} attributed string\n * @param  {Array}  nodes\n * @param  {Array}  breaks\n * @return {Array} attributed strings\n */\n\nvar breakLines = function breakLines(string, nodes, breaks) {\n  var start = 0;\n  var end = null;\n  var lines = breaks.reduce(function (acc, breakPoint) {\n    var node = nodes[breakPoint.position];\n    var prevNode = nodes[breakPoint.position - 1]; // Last breakpoint corresponds to K&P mandatory final glue\n\n    if (breakPoint.position === nodes.length - 1) return acc;\n    var line;\n\n    if (node.type === 'penalty') {\n      end = prevNode.value.end;\n      line = (0, _slice.default)(start, end, string);\n      line = (0, _insertGlyph.default)(line.length, HYPHEN, line);\n    } else {\n      end = node.value.end;\n      line = (0, _slice.default)(start, end, string);\n    }\n\n    start = end;\n    return [].concat(acc, [line]);\n  }, []); // Last line\n\n  lines.push((0, _slice.default)(start, string.string.length, string));\n  return lines;\n};\n/**\n * Return Knuth & Plass nodes based on line and previously calculated syllables\n *\n * @param {Object} attributed string\n * @param  {Object}  attributed string\n * @param  {Object}  layout options\n * @return {Array} attributed strings\n */\n\n\nvar getNodes = function getNodes(attributedString, _ref, options) {\n  var align = _ref.align;\n  var start = 0;\n  var hyphenWidth = 5;\n  var syllables = attributedString.syllables;\n  var hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);\n  var result = syllables.reduce(function (acc, s, index) {\n    var width = (0, _advanceWidthBetween.default)(start, start + s.length, attributedString);\n\n    if (s.trim() === '') {\n      var stretch = width * opts.width / opts.stretch;\n      var shrink = width * opts.width / opts.shrink;\n      var value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(_linebreak.default.glue(width, value, stretch, shrink));\n    } else {\n      var hyphenated = syllables[index + 1] !== ' ';\n      var _value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(_linebreak.default.box(width, _value, hyphenated));\n\n      if (syllables[index + 1] && hyphenated) {\n        acc.push(_linebreak.default.penalty(hyphenWidth, hyphenPenalty, 1));\n      }\n    }\n\n    start += s.length;\n    return acc;\n  }, []);\n  result.push(_linebreak.default.glue(0, null, _linebreak.default.infinity, 0));\n  result.push(_linebreak.default.penalty(0, -_linebreak.default.infinity, 1));\n  return result;\n};\n\nvar getStyles = R.pathOr({}, ['attributedString', 'runs', 0, 'attributes']);\n/**\n * Performs Knuth & Plass line breaking algorithm\n * Fallbacks to best fit algorithm if latter not successful\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @param {Object} attributed string\n * @return {Array} attributed strings\n */\n\nvar lineBreaker = function lineBreaker(options, attributedString, availableWidths) {\n  var tolerance = options.tolerance || 4;\n  var style = getStyles(attributedString);\n  var nodes = getNodes(attributedString, style, options);\n  var breaks = (0, _linebreak.default)(nodes, availableWidths, {\n    tolerance: tolerance\n  }); // Try again with a higher tolerance if the line breaking failed.\n\n  while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n    tolerance += TOLERANCE_STEPS;\n    breaks = (0, _linebreak.default)(nodes, availableWidths, {\n      tolerance: tolerance\n    });\n  }\n\n  if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n    breaks = (0, _bestFit.default)(nodes, availableWidths);\n  }\n\n  return breakLines(attributedString, nodes, breaks.slice(1));\n};\n\nvar _default = R.curryN(3, lineBreaker);\n\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","_bestFit","_linebreak","_slice","_insertGlyph","_advanceWidthBetween","HYPHEN","TOLERANCE_STEPS","TOLERANCE_LIMIT","opts","width","stretch","shrink","breakLines","string","nodes","breaks","start","end","lines","reduce","acc","breakPoint","node","position","prevNode","length","line","type","value","concat","push","getNodes","attributedString","_ref","options","align","hyphenWidth","syllables","hyphenPenalty","hyphenationPenalty","result","s","index","trim","glue","hyphenated","_value","box","penalty","infinity","getStyles","pathOr","lineBreaker","availableWidths","tolerance","style","slice","_default","curryN"],"sources":["/home/carlobottaro/Documents/UniversitÃ /gamification/node_modules/@react-pdf/textkit/lib/engines/linebreaker/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _bestFit = _interopRequireDefault(require(\"./bestFit\"));\n\nvar _linebreak = _interopRequireDefault(require(\"./linebreak\"));\n\nvar _slice = _interopRequireDefault(require(\"../../attributedString/slice\"));\n\nvar _insertGlyph = _interopRequireDefault(require(\"../../attributedString/insertGlyph\"));\n\nvar _advanceWidthBetween = _interopRequireDefault(require(\"../../attributedString/advanceWidthBetween\"));\n\nvar HYPHEN = 0x002d;\nvar TOLERANCE_STEPS = 5;\nvar TOLERANCE_LIMIT = 50;\nvar opts = {\n  width: 3,\n  stretch: 6,\n  shrink: 9\n};\n/**\n * Slice attributed string to many lines\n *\n * @param {Object} attributed string\n * @param  {Array}  nodes\n * @param  {Array}  breaks\n * @return {Array} attributed strings\n */\n\nvar breakLines = function breakLines(string, nodes, breaks) {\n  var start = 0;\n  var end = null;\n  var lines = breaks.reduce(function (acc, breakPoint) {\n    var node = nodes[breakPoint.position];\n    var prevNode = nodes[breakPoint.position - 1]; // Last breakpoint corresponds to K&P mandatory final glue\n\n    if (breakPoint.position === nodes.length - 1) return acc;\n    var line;\n\n    if (node.type === 'penalty') {\n      end = prevNode.value.end;\n      line = (0, _slice.default)(start, end, string);\n      line = (0, _insertGlyph.default)(line.length, HYPHEN, line);\n    } else {\n      end = node.value.end;\n      line = (0, _slice.default)(start, end, string);\n    }\n\n    start = end;\n    return [].concat(acc, [line]);\n  }, []); // Last line\n\n  lines.push((0, _slice.default)(start, string.string.length, string));\n  return lines;\n};\n/**\n * Return Knuth & Plass nodes based on line and previously calculated syllables\n *\n * @param {Object} attributed string\n * @param  {Object}  attributed string\n * @param  {Object}  layout options\n * @return {Array} attributed strings\n */\n\n\nvar getNodes = function getNodes(attributedString, _ref, options) {\n  var align = _ref.align;\n  var start = 0;\n  var hyphenWidth = 5;\n  var syllables = attributedString.syllables;\n  var hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);\n  var result = syllables.reduce(function (acc, s, index) {\n    var width = (0, _advanceWidthBetween.default)(start, start + s.length, attributedString);\n\n    if (s.trim() === '') {\n      var stretch = width * opts.width / opts.stretch;\n      var shrink = width * opts.width / opts.shrink;\n      var value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(_linebreak.default.glue(width, value, stretch, shrink));\n    } else {\n      var hyphenated = syllables[index + 1] !== ' ';\n      var _value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(_linebreak.default.box(width, _value, hyphenated));\n\n      if (syllables[index + 1] && hyphenated) {\n        acc.push(_linebreak.default.penalty(hyphenWidth, hyphenPenalty, 1));\n      }\n    }\n\n    start += s.length;\n    return acc;\n  }, []);\n  result.push(_linebreak.default.glue(0, null, _linebreak.default.infinity, 0));\n  result.push(_linebreak.default.penalty(0, -_linebreak.default.infinity, 1));\n  return result;\n};\n\nvar getStyles = R.pathOr({}, ['attributedString', 'runs', 0, 'attributes']);\n/**\n * Performs Knuth & Plass line breaking algorithm\n * Fallbacks to best fit algorithm if latter not successful\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @param {Object} attributed string\n * @return {Array} attributed strings\n */\n\nvar lineBreaker = function lineBreaker(options, attributedString, availableWidths) {\n  var tolerance = options.tolerance || 4;\n  var style = getStyles(attributedString);\n  var nodes = getNodes(attributedString, style, options);\n  var breaks = (0, _linebreak.default)(nodes, availableWidths, {\n    tolerance: tolerance\n  }); // Try again with a higher tolerance if the line breaking failed.\n\n  while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n    tolerance += TOLERANCE_STEPS;\n    breaks = (0, _linebreak.default)(nodes, availableWidths, {\n      tolerance: tolerance\n    });\n  }\n\n  if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n    breaks = (0, _bestFit.default)(nodes, availableWidths);\n  }\n\n  return breakLines(attributedString, nodes, breaks.slice(1));\n};\n\nvar _default = R.curryN(3, lineBreaker);\n\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}